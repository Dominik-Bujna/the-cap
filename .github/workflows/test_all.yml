name: Test All

on:
  push:
    branches: [dev]
  pull_request:
    branches: [main]

jobs:
  test-dataforecasting:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: DataForecasting
    steps:
      - uses: actions/checkout@v2
      #Test python code
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          python -m pytest

  test-ip_server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ImageProcessing/Combination/API_server/
    steps:
      - uses: actions/checkout@v2
      #Test go code
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Build Go
        run: go build .
      - name: Test Go
        run: go test -v .

  test-docker-imageprocessing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: build
        uses: docker/build-push-action@v2
        # with:
        #   context: ./
        #   file: ./Dockerfile
        # args: run --name yolo -p 127.0.0.1:8070:8070 -it -e DISPLAY=MY_IP:0.0 --gpus all --rm yologpu:0.1 ./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4 -i 0 -json_port 8070

    # runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ImageProcessing
    # runs:
    #   using: "docker"
    #   image: "Dockerfile"
    # steps:
    #   name: Build and push
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: ./
    #     file: ./Dockerfile
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ImageProcessing
  #   steps:
  #     - uses: actions/checkout@v2
  #     #Test python code
  #     - name: start container
  #     - runs:
  #       using: "docker"
  #       image: Dockerfile
  #       args: run --name yolo -p 127.0.0.1:8070:8070 -it -e DISPLAY=MY_IP:0.0 --gpus all --rm yologpu:0.1 ./darknet detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4 -i 0 -json_port 8070
  test-webui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
      - run: npm ci
      - run: npm run test:prod
      - run: npm run lint
